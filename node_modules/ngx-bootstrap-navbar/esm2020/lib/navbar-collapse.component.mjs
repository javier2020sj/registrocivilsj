import { ChangeDetectionStrategy, Component, ElementRef, inject, ViewEncapsulation, } from '@angular/core';
import { ngxNavbarAnimations } from './navbar-animation';
import * as i0 from "@angular/core";
export class NgxNavbarCollapseComponent {
    constructor() {
        this.isCollapsed = true;
        this.isTransitioning = false;
        this.nativeElement = inject(ElementRef).nativeElement;
        this.updateClasses();
    }
    toggle() {
        this.isTransitioning = true;
        this.isCollapsed = !this.isCollapsed;
        this.updateClasses();
    }
    close() {
        if (this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = true;
        this.updateClasses();
    }
    open() {
        if (!this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = false;
        this.updateClasses();
    }
    done() {
        this.isTransitioning = false;
        this.updateClasses();
    }
    updateClasses() {
        const classList = this.nativeElement.classList;
        const isTransitioning = this.isTransitioning;
        classList.toggle('collapse', !isTransitioning);
        classList.toggle('show', !this.isCollapsed && !isTransitioning);
        classList.toggle('collapsing', isTransitioning);
    }
}
NgxNavbarCollapseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: NgxNavbarCollapseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxNavbarCollapseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: NgxNavbarCollapseComponent, selector: "ngx-navbar-collapse", host: { listeners: { "@slideState.done": "done()" }, properties: { "@slideState": "!isCollapsed" }, classAttribute: "navbar-collapse ngx-navbar-collapse" }, exportAs: ["ngxNavbarCollapse"], ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, styles: [".ngx-navbar-collapse.collapsing{height:auto}\n"], animations: [ngxNavbarAnimations.navbarSlide], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: NgxNavbarCollapseComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-navbar-collapse', template: ` <ng-content></ng-content> `, host: {
                        class: 'navbar-collapse ngx-navbar-collapse',
                        '[@slideState]': '!isCollapsed',
                        '(@slideState.done)': 'done()',
                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [ngxNavbarAnimations.navbarSlide], exportAs: 'ngxNavbarCollapse', styles: [".ngx-navbar-collapse.collapsing{height:auto}\n"] }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLWNvbGxhcHNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1ib290c3RyYXAtbmF2YmFyL3NyYy9saWIvbmF2YmFyLWNvbGxhcHNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFzQnpELE1BQU0sT0FBTywwQkFBMEI7SUFNckM7UUFMTyxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUNsQixvQkFBZSxHQUFHLEtBQUssQ0FBQztRQUNmLGtCQUFhLEdBQzVCLE1BQU0sQ0FBMEIsVUFBVSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBRzFELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVTLElBQUk7UUFDWixJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVTLGFBQWE7UUFDckIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7UUFDL0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUM3QyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQy9DLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2hFLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7O3VIQTdDVSwwQkFBMEI7MkdBQTFCLDBCQUEwQix5UEFsQjNCLDZCQUE2QiwwRkFlM0IsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUM7MkZBR2xDLDBCQUEwQjtrQkFwQnRDLFNBQVM7K0JBQ0UscUJBQXFCLFlBQ3JCLDZCQUE2QixRQVFqQzt3QkFDSixLQUFLLEVBQUUscUNBQXFDO3dCQUM1QyxlQUFlLEVBQUUsY0FBYzt3QkFDL0Isb0JBQW9CLEVBQUUsUUFBUTtxQkFDL0IsaUJBQ2MsaUJBQWlCLENBQUMsSUFBSSxtQkFDcEIsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxZQUNuQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIGluamVjdCxcclxuICBWaWV3RW5jYXBzdWxhdGlvbixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgbmd4TmF2YmFyQW5pbWF0aW9ucyB9IGZyb20gJy4vbmF2YmFyLWFuaW1hdGlvbic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1uYXZiYXItY29sbGFwc2UnLFxyXG4gIHRlbXBsYXRlOiBgIDxuZy1jb250ZW50PjwvbmctY29udGVudD4gYCxcclxuICBzdHlsZXM6IFtcclxuICAgIGBcclxuICAgICAgLm5neC1uYXZiYXItY29sbGFwc2UuY29sbGFwc2luZyB7XHJcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICB9XHJcbiAgICBgLFxyXG4gIF0sXHJcbiAgaG9zdDoge1xyXG4gICAgY2xhc3M6ICduYXZiYXItY29sbGFwc2Ugbmd4LW5hdmJhci1jb2xsYXBzZScsXHJcbiAgICAnW0BzbGlkZVN0YXRlXSc6ICchaXNDb2xsYXBzZWQnLFxyXG4gICAgJyhAc2xpZGVTdGF0ZS5kb25lKSc6ICdkb25lKCknLFxyXG4gIH0sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBhbmltYXRpb25zOiBbbmd4TmF2YmFyQW5pbWF0aW9ucy5uYXZiYXJTbGlkZV0sXHJcbiAgZXhwb3J0QXM6ICduZ3hOYXZiYXJDb2xsYXBzZScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hOYXZiYXJDb2xsYXBzZUNvbXBvbmVudCB7XHJcbiAgcHVibGljIGlzQ29sbGFwc2VkID0gdHJ1ZTtcclxuICBwcml2YXRlIGlzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbmF0aXZlRWxlbWVudCA9XHJcbiAgICBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpLm5hdGl2ZUVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy51cGRhdGVDbGFzc2VzKCk7XHJcbiAgfVxyXG5cclxuICB0b2dnbGUoKSB7XHJcbiAgICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XHJcbiAgICB0aGlzLmlzQ29sbGFwc2VkID0gIXRoaXMuaXNDb2xsYXBzZWQ7XHJcbiAgICB0aGlzLnVwZGF0ZUNsYXNzZXMoKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgaWYgKHRoaXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRydWU7XHJcbiAgICB0aGlzLnVwZGF0ZUNsYXNzZXMoKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICBpZiAoIXRoaXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5pc0NvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy51cGRhdGVDbGFzc2VzKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZG9uZSgpIHtcclxuICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLnVwZGF0ZUNsYXNzZXMoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCB1cGRhdGVDbGFzc2VzKCkge1xyXG4gICAgY29uc3QgY2xhc3NMaXN0ID0gdGhpcy5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdDtcclxuICAgIGNvbnN0IGlzVHJhbnNpdGlvbmluZyA9IHRoaXMuaXNUcmFuc2l0aW9uaW5nO1xyXG4gICAgY2xhc3NMaXN0LnRvZ2dsZSgnY29sbGFwc2UnLCAhaXNUcmFuc2l0aW9uaW5nKTtcclxuICAgIGNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnLCAhdGhpcy5pc0NvbGxhcHNlZCAmJiAhaXNUcmFuc2l0aW9uaW5nKTtcclxuICAgIGNsYXNzTGlzdC50b2dnbGUoJ2NvbGxhcHNpbmcnLCBpc1RyYW5zaXRpb25pbmcpO1xyXG4gIH1cclxufVxyXG4iXX0=