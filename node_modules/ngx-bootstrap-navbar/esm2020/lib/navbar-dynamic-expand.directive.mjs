import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, inject, } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, takeUntil, filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/platform";
import * as i2 from "@angular/cdk/scrolling";
export class NgxNavbarDynamicExpandDirective {
    constructor(ngZone, platform, _document, viewportRuler, cdRef) {
        this.ngZone = ngZone;
        this.platform = platform;
        this._document = _document;
        this.onDestroy$ = new Subject();
        this.update$ = new Subject();
        this.nativeElement = inject(ElementRef).nativeElement;
        this.loaded = false;
        this._isExpanded = false;
        ngZone.runOutsideAngular(() => {
            merge(viewportRuler.change(150), this.update$)
                .pipe(filter(() => this.loaded ||
                (this.loaded = checkBootstrapStylesAreLoaded(_document, this.nativeElement))), map(() => {
                const element = this.nativeElement;
                let overflowSize;
                if (this.isExpanded) {
                    overflowSize = element.scrollWidth - element.offsetWidth;
                }
                else {
                    const clone = element.cloneNode(true);
                    clone.classList.add('navbar-expand');
                    const parent = element.parentElement;
                    if (parent) {
                        parent.appendChild(clone);
                        overflowSize = clone.scrollWidth - clone.offsetWidth;
                        parent.removeChild(clone);
                    }
                }
                return !overflowSize;
            }), distinctUntilChanged(), takeUntil(this.onDestroy$))
                .subscribe((isExpanded) => {
                ngZone.run(() => {
                    this._isExpanded = isExpanded;
                    cdRef.markForCheck();
                });
            });
        });
    }
    get isExpanded() {
        return this._isExpanded;
    }
    ngAfterContentInit() {
        if (!this.platform.isBrowser) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.loaded = checkBootstrapStylesAreLoaded(this._document, this.nativeElement);
            if (this.loaded) {
                this.update$.next();
            }
            else {
                setTimeout(() => {
                    this.ngAfterContentInit();
                }, 1000 / 60);
            }
        });
    }
    ngOnDestroy() {
        this.update$.complete();
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
}
NgxNavbarDynamicExpandDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: NgxNavbarDynamicExpandDirective, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT }, { token: i2.ViewportRuler }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
NgxNavbarDynamicExpandDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.6", type: NgxNavbarDynamicExpandDirective, selector: "[ngxNavbarDynamicExpand]", host: { properties: { "class.navbar-expand": "isExpanded" }, classAttribute: "navbar text-nowrap" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: NgxNavbarDynamicExpandDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxNavbarDynamicExpand]',
                    host: {
                        class: 'navbar text-nowrap',
                        '[class.navbar-expand]': 'isExpanded',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i2.ViewportRuler }, { type: i0.ChangeDetectorRef }]; } });
function checkBootstrapStylesAreLoaded(document, element) {
    const documentWindow = document.defaultView || window;
    const computedStyle = documentWindow && documentWindow.getComputedStyle
        ? documentWindow.getComputedStyle(element)
        : false;
    return computedStyle && computedStyle.whiteSpace === 'nowrap';
}
//# sourceMappingURL=data:application/json;base64,